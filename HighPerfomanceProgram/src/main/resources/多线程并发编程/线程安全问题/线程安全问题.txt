内存结构：
线程共享部分：方法区、堆内存
线程独占部分：虚拟机栈、本地方法栈、程序计数器

JVM运行时数据区
线程独占：每个线程都会有它的独立空间，随线程生命周期而创建和销毁
线程共享：所有线程都能访问这块内存区域，随虚拟机或GC而创建和销毁

线程中有栈桢、本地变量表

JVM内存模型
线程独享区：
共享区域：

多线程中的问题：
1.所见非所得
2.不同运行平台有不同表现
3.错误难定位
4.无法用肉眼测试程序准确性

指令重排序
Java编程语言的语义允许编译器和微处理器执行优化，这些优化可以与不正确的代码交互，从而产生看似矛盾的行为

jitwatch的使用可直接参考这个操作博客
http://www.cnblogs.com/stevenczp/p/7975776.html
https://www.cnblogs.com/stevenczp/p/7978554.html
1、 输出jit日志
（windows）在jre/bin/server  放置hsdis动态链接库
eclise、idea等工具，加上JVM参数
-server -XX:+UnlockDiagnosticVMOptions -XX:+PrintAssembly -XX:+LogCompilation -XX:LogFile=jit.log
2、 工具安装
下载  https://github.com/AdoptOpenJDK/jitwatch
解压 通过maven运行
mvn clean compile exec:java
3、 配置jitwatch
页面选择 config， 配置要调试的项目src源码路径，和class编译路径
打开jit.log
点击start
4、 在分析的结果中，选中指定的类，再选择右侧的具体方法，则弹出jit编译结果


一个线程修改的值是否能被另一个线程可见，可见性问题

内存模型的含义
内存模型描述程序的可能行为
Java编程语言内存模型通过检查执行跟踪中的每个读操作，并根据某些规则检查该读操作观察到的写操作是否有效来工作。
只要程序的所有执行产生的结果都可以由内存模型预测。具体的实现者任意实现，包括操作的重新排序和删除不必要的同步。
内存模型决定了在程序的每个点上可以读取什么值。

Shared Variables共享变量描述
可以在线程间共享的内存称为共享内存或堆内存
所有实例字段、静态字段和数组元素都存储在堆内存中
如果至少有一个访问是写的，那么对同一变量的两次访问（读或写）是冲突的
定义在：https://docs.oracle.com/javase/specs/jls/se8/html/jls-17.html#jls-17.4.1
docs.oracle.com

线程操作的定义
write/read
lock/unlock
外部操作（socket等）
启动和终止
程序顺序：如果一个程序没有数据竞争，那么程序的所有执行看起来都是顺序一致的
本规范值设计线程间的操作


同步规则的定义：
1.对于监视器m的解锁与所有后续操作对于m的加锁同步
2.对volatile变量v的写入，于所有其他线程后续对v的读取同步
3.启动线程的操作与线程中的第一个操作同步
4.对于每个属性写入默认值（0，false，null）与每个线程对其进行的操作同步
5.线程T1的最后操作与线程T2发现线程T1已经结束 同步（isAlive，join）
6.如果线程T1中断了T2，那么线程T1的中断操作与其他所有线程发现T2被中断了同步
通过抛出InterruptException异常，或者调用Thread.interrupted或者Thread.isInterrupted

Happens-before先行发生原则
happens-before关系强调两个有冲突的动作之间的顺序，以及定义数据争用的发生时机
具体的虚拟机，有必要确保一下原则的成立
某个线程中的每个动作都happens-before该线程中该动作后面的动作。
某个管程上的unlock动作happens-before同一个管程上后续的lock动作
对某个volatile字段的写操作happens-before每个后续对该volatile字段的读操作
在某个线程对象上调用start()方法happens-before该启动了的线程中的任意动作
某个线程中的所有动作happens-before任意其他线程成功从该线程对象上的jon()中返回
如果某个动作a happens-before 动作b，且b happens-before 动作c，则有a happens-before c


volatile关键字
可见性问题：让一个线程对共享变量的修改，能够及时的被其他线程看到
根据JVM中规定的happen before和同步原则
对某个volatile字段的写操作happens-before每个后续对该volatile字段的读操作
对volatile变量v的写入，与所有其他线程后续对v的读同步

要满足这些条件，所以volatile关键字就有这些功能：
1.禁止缓存：
volatile变量的访问控制符会加ACC_VOLATILE
https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-4.html#jvms-4.5
2.对volatile变量相关的指令不做重排序

可通过javap -v -p ***.class查看变量是否有ACC_VOLATILE (jvm定义了这个flag是不可以cache的)

思路：从内存结构到内存模型
jvm工作方式，有多块内存区域，处理放在主内存中，读数据会有缓存，会存在数据不一致、指令重排序等情况

内存模型决定了在程序的每个点可以读取什么

jitwatch的使用
可直接参考这个操作博客
http://www.cnblogs.com/stevenczp/p/7975776.html
https://www.cnblogs.com/stevenczp/p/7978554.html
1、 输出jit日志
（windows）在jre/bin/server  放置hsdis动态链接库
eclise、idea等工具，加上JVM参数
-server -XX:+UnlockDiagnosticVMOptions -XX:+PrintAssembly -XX:+LogCompilation -XX:LogFile=jit.log
2、 工具安装
下载  https://github.com/AdoptOpenJDK/jitwatch
解压 通过maven运行
mvn clean compile exec:java
3、 配置jitwatch
页面选择 config， 配置要调试的项目src源码路径，和class编译路径
打开jit.log
点击start
4、 在分析的结果中，选中指定的类，再选择右侧的具体方法，则弹出jit编译结果

final在JVM中的处理
final在该对象的构造函数中设置对象的字段，当线程看到该对象时，将始终看到该对象的final字段的正确构造版本

如果在构造函数中设置字段后发生读取，则会看到该final字段分配的值，否则它将看到默认值
