一、竞态条件与临界区
public class Demo{
    public int i = 0;
    public void func1(){
        i++;
    }
}
多个线程访问了相同的资源，向这些资源做了写操作时，对执行顺序有要求。
临界区：func1方法内部就是临界区域，关键部分代码的多线程并发执行，会对执行结果产生影响
竞态条件：可能发生在临界区域内的特殊条件。多线程执行func1方法中的i++关键代码时，产生了竞态条件

二、共享资源
如果一段代码是线程安全的，则它不包含竞态条件。只有当多个线程更新共享资源时，才会发生竞态条件
栈封闭时，不会再线程之间共享的变量，都是线程安全的
局部对象引用本身不共享，但是引用的对象存储在共享堆中。如果方法内创建的对象，只是在方法中传递，并且不对其他线程可用，那么也是线程安全的。
判定规则：如果创建、使用和处理资源，永远不会逃脱单个线程的控制，该资源的使用是线程安全的

三、不可变对象
public class Demo(){
    private int value = 0;
    public Demo(int value){
        this.value = value;
    }
    public int getValue(){
        return this.value;
    }
}
创建不可变的共享对象来保证对象在线程间共享时不被修改，从而实现线程安全
实例被创建，value变量就不能再被修改，这就是不可变性

四、原子操作定义
原子操作可以是一个步骤，也可以是多个步骤，但是其顺序不可以被打乱，也不可以被切割而只执行其中的一部分（不可中断性）
将整个操作视作一个整体是原子性的核心特征
存在竞态条件，线程不安全，需要转变为原子操作才能安全。方式：循环CAS、锁

五、CAS机制
Compare and swap比较和交换。属于硬件同步原语，处理器提供了基本内存操作的原子性保证
CAS操作需要输入两个数值，一个旧值A（期望操作前的值）和一个新值B，在操作期间先比较下旧值有没有变化，
如果没有发生变化，才换成新值，发生了变化则不交换。
JAVA中的sun.misc.Unsafe类，提供了compareAndSwapInt()和compareAndSwapLong等几个方法实现CAS


六、J.U.C包内的原子操作封装类（java.util.concurrent）
AtomicIntegerFieldUpdater:原子更新整形的字段的更新器
AtomicLongFiledUpdater
AtomicReferenceFieldUpdater

CAS的三个问题
1.循环+CAS，自旋的实现让所有线程都处于高频运行，争抢CPU执行时间的状态。如果操作长时间不成功，会带来很大的CPU资源消耗
2.仅针对单个变量的操作，不能用于多个变量来实现原子操作
3.ABA问题

