一、为什么用线程池
    线程池是不是越多越好
    1.线程在Java中是一个对象，更是操作系统的资源，线程创建、销毁需要时间。如果创建时间+销毁时间 > 执行任务的时间 就很不合算
    2.Java对象会占用内存，操作系统线程占用系统内存，根据jvm规范，一个线程默认最大栈大小为1M，这个栈空间需要从系统内存中分配。线程过多，会消耗很多的内存
    3.操作系统需要频繁切换线程上下文，影响性能。
    线程池的推出，就是为了方便控制线程的数量，生产环境中一般都会用到线程池

二、线程池原理-概念
1、线程池管理器：用于创建并管理线程池，包括创建线程池，销毁线程池，添加新任务
2、工作线程：线程池中线程，在没有任务时处于等待状态，可以循环的执行任务
3、任务接口：每个任务必须实现的接口，以供工作线程调度任务的执行，它主要规定了任务的入口，任务执行完后的收尾工作，任务的执行状态等。
4、任务队列：用于存放没有处理的任务。提供一种缓冲机制。

三、线程池API-接口定义和实现类
接口：
Executor：最上层接口，定义执行任务的方法execute
ExecutorService：继承Executor接口，拓展了Callable、Future、关闭方法
ScheduleExecutorService：继承了ExecutorService，增加定时任务相关方法
实现类：
ThreadPoolExecutor：基础、标准的线程池实现
ScheduledThreadPoolExecutor：继承了ThreadPoolExecutor，实现了ScheduleExecutorService中相关定时任务的方法

//创建并执行一个周期性的任务，过了初始延迟时间，第一次被执行，后续以给定的周期时间执行，执行中发生异常，任务就停止
ScheduledAtFixedRate(Runnable command, long initialDelay, long period, TimeUnit unit);

//创建并执行一个周期性的任务，过了初始延迟时间，第一次被执行，后续以给定的周期时间执行，执行中发生异常，任务就停止
ScheduledWithFixedDelay(Runnable command, long initialDelay, long period, TimeUnit unit);
区别：一次任务执行时长超过了周期时间，下一次任务会在该次任务执行结束的时间基础上，计算执行延时
超过周期的长时间处理任务，下次执行任务的基础上，增加计算延时

四、线程池API-Executor工具类
可以自己实例化线程池，也可以用Executor创建线程池的工厂类：常用方法如下：
newFixedThreadPool(int nThreads)创建一个固定大小、任务队列容量无界的线程池。核心线程数=最大线程数

newCachedThreadPool()创建一个大小无界的缓冲线程池。任务队列是一个同步队列。任务加入到池中，如果池中有空闲线程，则用空闲线程执行，无则创建新线程执行。
池中的线程空闲超过60秒，将被销毁释放。线程数随任务的多少变化。适用于耗时较少的异步任务。池的核心线程数=0，最大线程数=Integer.MAX_VALUE

newSingleThreadExecutor()只有一个线程来执行无界任务队列的单一线程池。该线程池确保任务按加入的顺序一个一个依次执行。
当唯一的线程因任务异常终止时，将创建一个新的线程来继续执行后续的任务。
于newFixedThreadPool(1)区别在于单一线程池的大小在newSingleThreadExecutor方法中硬编码，不能再改变。

newScheduledThreadPool(int corePoolSize)能定时执行任务的线程池。该池的核心线程数由参数指定，最大线程数=Integer.MAX_VALUE。

注意：线程池创建不允许使用Executors创建，而是通过ThreadPoolExecutor的方式，这样的处理方式让那个写的同学更加明确线程池的运行规则，规避资源耗尽风险。
Executors各个方法的弊端：
1）newFixedThreadPool和newSingleThreadExecutor：堆积的请求队列可能会耗费非常大的内存，甚至OOM。
2）newCachedThreadPool和newScheduledThreadPool：主要问题是线程数最大是Integer。MAX_VALUE，可能会创建数量非常多的线程，甚至OOM。

五、线程池原理-任务execute过程
1.是否达到核心线程数量？没达到，创建一个工作线程来执行任务
2.工作队列是否已满？没满，将新提交的任务存储在工作队列里。
3.是否达到线程池最大数量？没达到，则创建一个新的工作线程来执行任务
4.最后执行拒绝执行策略处理任务。

定时任务的本质就是一个延时队列，将任务提交到DelayWorkQueue延时队列

六、线程数量
如何确定合适数量的线程
计算型任务（加减乘除运算哈希值）：cpu数量的1-2倍
IO型任务（网络操作，数据库操作，文件操作）：相对比计算型任务，需多一些线程，要根据具体的IO阻塞时长进行考量决定。
如Tomcat中默认的最大线程数量为：200
窍门：通过监控CPU的使用情况，在生产环境中，一般CPU运用率达到80%就可以说是充分利用了，若小于80&，则CPU利用率不合理，