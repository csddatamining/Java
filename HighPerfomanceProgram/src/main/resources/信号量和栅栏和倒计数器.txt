Semaphore信号量
控制多个线程争抢许可
acquire：获取一个许可，如果没有你等待，
release：释放一个许可。
availablePermits：方法得到可用的许可数目
典型场景：
1.代码并发处理限流（hystrix框架）


CountDownLatch
java1.5被引入的一个工具类，常被称为倒计数器
创建对象时，传入指定数值作为线程参与的数量；
await：方法等待计数器变为0，在这之前，线程进入等待状态
countdown：计数器数值减一，直到0为止
经常用于等待其他线程执行到某一个节点，再继续执行当前线程代码
使用场景示例：
1.统计线程执行的情况；
2.压力测试中，使用countDownLatch实现最大程度的并发处理；
3.多个线程之间，相互通信，比如线程一部调用完接口，结果通知

CyclicBarrier
又称为线程栅栏
创建对象时，指定栅栏线程数量
await：等指定数量的线程都处于等待状态是，继续执行后续代码
barrierAction：线程数量到了指定量后，自动触发执行指定任务
和CountDownLatch重要区别在于，CyclicBarrier对象可对此处触发执行
典型场景：
1.数量比较大时，实现批量插入数据到数据库
2.数据统计，30个线程统计30天数据，全部统计完毕后哦，执行汇总

