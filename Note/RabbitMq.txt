一、RabbitMQ简介
消息指在应用间传送的数据。消息可以非常简单，比如只包含文本字符串，也可以更复杂，可能包含嵌入对象。
消息队列是一种应用间的通信方式，消息发送后可以立即返回，由消息系统来确保消息的可靠传递
消息发布者只管把消息发布到MQ中而不用管谁来取。消息使用者只管从MQ中取消息而不管是谁发布的。这样发布者和使用者都不知道对方存在

RabbitMQ是一个由Erlang语言开发的AMQP的开源实现

Dubbo（通讯的RPC框架，微服务框架）
消息队列属于中间件
分布式日志系统：Scribe、Flune  -》kafka -》HDFS/HIVE/Spark/Stream
kafka是分布式批处理的消息队列
RabbitMQ是事务型的消息队列（单处理）

二、使用场景：
1.异步处理：服务A调用服务B，同步，服务B返回给服务A。用了消息队列后
2.应用解耦
3.流量削峰
4.日志处理
5.消息通讯



电商业务消息队列架构-队列设计
紫色圈代表路由（exchange）
绿色代表队列Queue
方块代表Service监听队列


三、电商业务中的关键设计-消息确认机制
ACK机制
每个Consumer可能需要一段是时间才能处理完收到的数据。如果在这个过程中，Consumer出错了，
异常退出了，而数据还没有处理完成，那么非常不幸，这段数据就丢失了。
因为我们采用no-ack的方式进行确认，
也就是说，每次Consumer接受到数据后，而不管是否处理完成，RabbitMQ Server会立即把这个Message标记为完成，然后从queue中删除了。

如果一个Consumer异常退出了，它处理的数据能够被另外的Consumer处理，这样数据在这种情况下就不会丢失了。

为了保证数据不被丢失，RabbitMQ支持消息确认机制，即acknowledgements。为了保证数据能被正确处理而不仅仅是被Consumer收到，那么我们不能采用no-ack。
而应该是在处理完数据后发送ack

在处理数据后发送的ack，就是告诉RabbitMQ数据已经被接收，处理完成，RabbitMQ就可以去安全的删除它了。

四、电商业务中的关键设计-幂等性保证
WEB资源或API方法的幂等性是指一次和多次请求某个资源应该具有相同的副作用。

幂等性是系统的接口对外一种承诺（而不是实现），承诺只要调用接口成功，外部多次调用对系统的影响是一致的
幂等性是分布式系统设计中的一个重要概念，对超时处理、系统恢复等具有重要意义

声明为幂等性接口会认为外部调用失败是常态，并且失败之后必然会有重试。例如，在因网络中断等原因请求导致请求方未能收到返回值的情况下，
如果该资源具备幂等性，请求方只需要重新请求即可，而无需担心重复调用会产生错误。

实际上，我们常用的HTTP协议的方法是具有幂等性语义要求的，比如：get方法用于获取资源，不应有副作用，因此是幂等的；
post方法用于创建资源，每次请求都会产生新的资源，因此不具备幂等性；put方法用于更新资源，是幂等的；delete方法用于删除资源，也是幂等的

五、电商业务中的关键设计-分布式事务
CAP理论
一个经典的分布式系统理论。CAP理论告诉我们:一个分布式系统不可能同时满足一致性（Consistency）、可用性（Availability）、分区容错性（Partition tolerance），最多只能同时满足两项
1、一致性：在分布式环境下，一致性是指数据在多个副本之间能否保持一致的特性。在一致性需求下，当一个系统在数据一致的状态下执行更新操作后，应该保证系统的数据仍然处于一致的状态。
对于一个将数据副本分布在不同分布式节点上的系统来说，要保证多个节点
上的数据保持一致性，细分为强一致性，单调一致性（事情不能回滚），会话一致性（TCP中或者一次事务中），最终一致性，弱一致性。

2.可用性：指系统提供的服务必须一致处于可用的状态，对于用户的每一个操作请求总是能够在有限的时间内返回结果。这里的重点是有限时间内和返回结果。
有限时间内指：对于用户的一个操作请求，系统必须能够在制定的时间内返回对应的处理结果，如果超过了这个时间范围，那么系统就被认为是不可用的。
有限时间内指：系统设计之初就设计好的运行指标。通常不同系统之间有很大不同，无论如何，对于用户请求，系统必须存在一个合理的响应时间。
返回结果是可用性的另一个非常重要的指标，它要求系统在完成用户请求的处理后，返回一个正常的响应结果。正常的响应结果通常能够明确地反映出对请求的处理结果，即成功或失效，而不是一个让用户困惑的结果。

3.分区容错性：分布式系统在遇到任何网络分区故障的时候，仍然需要能够保证对外提供满足一致性和可用性的服务，除非是整个网络环境都发送故障。

CA:放弃分区容错性，加强一致性和可用性，其实就是传统的单机数据库的选择
AP:放弃一致性（强一致性），很多分布式系统的选择，如NoSQL系统
CP:放弃可用性，如Zookeeper














