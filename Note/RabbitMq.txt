一、RabbitMQ简介
消息指在应用间传送的数据。消息可以非常简单，比如只包含文本字符串，也可以更复杂，可能包含嵌入对象。
消息队列是一种应用间的通信方式，消息发送后可以立即返回，由消息系统来确保消息的可靠传递
消息发布者只管把消息发布到MQ中而不用管谁来取。消息使用者只管从MQ中取消息而不管是谁发布的。这样发布者和使用者都不知道对方存在

RabbitMQ是一个由Erlang语言开发的AMQP的开源实现

Dubbo（通讯的RPC框架，微服务框架）
消息队列属于中间件
分布式日志系统：Scribe、Flune  -》kafka -》HDFS/HIVE/Spark/Stream
kafka是分布式批处理的消息队列
RabbitMQ是事务型的消息队列（单处理）

二、使用场景：
1.异步处理：服务A调用服务B，同步，服务B返回给服务A。用了消息队列后
2.应用解耦
3.流量削峰
4.日志处理
5.消息通讯



电商业务消息队列架构-队列设计
紫色圈代表路由（exchange）
绿色代表队列Queue
方块代表Service监听队列


三、电商业务中的关键设计-消息确认机制
ACK机制
每个Consumer可能需要一段是时间才能处理完收到的数据。如果在这个过程中，Consumer出错了，
异常退出了，而数据还没有处理完成，那么非常不幸，这段数据就丢失了。
因为我们采用no-ack的方式进行确认，
也就是说，每次Consumer接受到数据后，而不管是否处理完成，RabbitMQ Server会立即把这个Message标记为完成，然后从queue中删除了。

如果一个Consumer异常退出了，它处理的数据能够被另外的Consumer处理，这样数据在这种情况下就不会丢失了。

为了保证数据不被丢失，RabbitMQ支持消息确认机制，即acknowledgements。为了保证数据能被正确处理而不仅仅是被Consumer收到，那么我们不能采用no-ack。
而应该是在处理完数据后发送ack

在处理数据后发送的ack，就是告诉RabbitMQ数据已经被接收，处理完成，RabbitMQ就可以去安全的删除它了。














