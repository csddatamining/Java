自动垃圾收集
自动垃圾收集是查看堆内存，识别正在使用哪些对象以及哪些对象未被删除以及删除未使用对象的过程

使用中的对象或引用的对象以为这程序的某些部分仍然维护指向该对象的指针。
程序的任何不封都不再引用未使用的对象或未引用的对象，因此可以回收未引用对象使用的内存
像C这样的编程语言中，分配和释放内存是一个手动过程
在Java中，解除分配内存的过程由垃圾收集器自动处理

如何确定内存需要被回收
该过程的第一步称为标记。这是垃圾收集器识别哪些内存正在使用而哪些不使用的地方
不同类型内存的判断方式
1.对象回收-引用计数
2.对象回收-可达性分析
3.方法区回收

可达性分析算法
简单来说，将对象及其引用关系看做一个图，选定活动的对象作为GC Roots；
然后跟踪引用链条，如果一个对象和GC Root之间不可达，也就是不存在引用，那么即可认为是可回收对象
可以作为GC Root的对象
1.虚拟机栈中正在引用的对象
2.本地方法栈中正在引用的对象
3.静态属性引用的对象
4.方法区常量引用的对象

引用类型和可达性级别
引用类型：
1.强引用（StrongReference）：最常见的普通对象引用，只要还有强引用执行一个对象，就不会回收
2.软引用（SoftReference）：JVM认为内存不足时，才会去试图回收软引用指向的对象。（缓存场景）
3.弱引用（WeakReference）：虽然是引用，但随时可能被回收掉。
4.虚引用（PhantomReference）：不能通过它访问对象。供了对象finalize以后，执行指定逻辑的机制。
可达性级别：
1.强可达（Strongly Reachable）：一个对象可以有一个或多个线程可以不通过各种引用访问到的情况
2.软可达（Softly Reachable）：当我们只能通过软引用才能访问到对象的状态
3.弱可达（Weakly Reachable）：只能通过弱引用访问时的状态。当弱引用被清除的时候，就符合销毁条件
4.幻象可达（Phantom Reachable）：不存在其他引用，并且finalize过了，只有幻象引用指向这个对象
5.不可达（unreachable）：意味着可以被清除了

垃圾收集算法
标记-清除（Mark-Sweep）算法：
复制算法：
