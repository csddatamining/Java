JVM用来存储加载的类信息、常量、静态变量、变异后的代码等数据
虚拟机规范中这是一个逻辑区划。具体实现根据不同虚拟机来实现
如：Oracle的HotSpot在Java7中方法区放在永久带，Java8放在元数据空间，并且通过GC机制对这个区域进行管理

类生命周期
1.加载（读取二进制内容
2.验证（验证class文件规范、语义分析、引用验证、字节码验证
3.准备（分配内存、设置类static修饰的变量初始值
4.解析（类、接口、字段、类方法等解析
5.初始化（为静态变量赋值；执行静态代码块
6.使用（创建实例对象
7.卸载（从JVM方法区中卸载

类加载器
类加载器负责装入类，搜搜网络、jar、zip、文件夹、二进制数据、内存等指定位置的类资源
一个Java程序运行，最少有三个类加载器实例，负责不同类的加载
1.Bootstrap loader核心类库加载器
C/C++实现，无对应Java类：null
加载JRE_HOMT/jre/lib目录，或用户配置的目录
JDK核心类库rt.jar...String...
2.Extension Class Loader扩展类库加载器
ExtClassLoader的实例：
加载JRE_HOME/jre/lib/ext目录
JDK扩展包，或用户配置的目录
3.application class loader用户应用程序加载器
AppClassLoader的实例：
加载java.classpath指定的目录，
用户应用程序class-path或者
java命令运行时参数-p

验证问题
查看类对应的加载器

JVM如何知道我们的类在何处
class信息存放在不同的位置，桌面jar、项目bin目录、target目录等

查看openjdk源代码：sun.misc.Launcher.AppClassLoader
结论：读取java.class.path配置，指定去哪些地址加载类资源
验证过程：利用jps、jcmd两个命令
1、jsp查看本机JAVA进程
2、查看运行时配置：jcmd 进程号 VM.system_properties

类不会重复加载
类的唯一性：同一个类加载器，类名一样，代表是同一个类
识别方式：ClassLoader Instance id + PackageName + ClassName
验证方式：使用类加载器，对同一个class类的不同版本，进行多次加载，检查是否会加载到最新的代码

类的卸载
类什么时候会被卸载？
满足以下两个条件：
1、该Class所有的实例都已经被GC；
2、加载该类的ClassLoader实例已经被GC；
验证方式：jvm启动中增加 -verbose:class参数，输出类加载和卸载的日志信息

双亲委派模型
为了避免重复加载，由下到上逐级委托，由上到下逐级查找
首先不会自己去尝试加载类，而是把这个请求委派给父加载器去完成；
每一个层次的加载器都是如此，因此所有的类加载请求都会传给上层的启动类加载器
只有当父加载器反馈自己无法完成该加载请求，子加载器才会尝试自己去加载

