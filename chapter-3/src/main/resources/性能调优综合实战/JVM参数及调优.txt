调优基本概念
在调整性能时，JVM有三个组件：
1.堆大小调整
2.垃圾收集器调整
3.JIT编译器
大多数调优选项都与调整堆大小和最合适的垃圾收集器有关
JIT编译器对性能也有很大影响，但很少需要使用较新版本的JVM进行调优
通常，调优Java应用程序时，重点是以下两个主要目标之一：
响应性：应用程序或系统对于请求的数据进行响应的速度，对于专注于响应性的应用程序，长的暂停时间是不可接受的，重点是在短时间内做出响应
吞吐量：侧重于在特定时间段内最大化应用程序的工作量，对于专注于吞吐量的应用程序，高暂停时间是可接受的
由于高吞吐量应用程序在较长时间内专注于基准测试，因此不需要考虑凯苏响应时间。
系统瓶颈核心还是在应用代码，一般情况下无需过多调优，JVM本身在不断优化。

常用JVM参数
参考oracle官网

jmap -heap [pid]    看堆使用情况，当前堆配置，及各个老年新生代的使用情况
jcmd                看当前运行的程序
jstat -gc -h10 [pid] 1000



GC调优思路
1.分析场景
例如：启动速度慢；偶尔出现响应慢于平均水平或出现卡顿
2.确定目标
内存占用、低延时、吞吐量
3.收集日志
通过参数配置收集GC日志；通过JDK工具查看GC状态（jstat）
4.分析日志
使用工具辅助分析日志，查看GC次数，GC时间
5.调整参数
切换垃圾收集器或者调整垃圾收集器参数

通用GC参数
-XX:ParallelGCThreads
-XX:ConcGCThreads
-XX:MaxGCPauseMillis
-XX:GCTimeRatio
-XX:SurvivorRatio
-XX:NewRatio
-XX:+PrintGCDetails
-XX:+PrintGCTimeStamps
-Xloggc:log/gc.log
-XX:+PrintHeapAtGC






测试环境：JVM配置为1核1G，JAVA8，固定设置堆大小 1G
[root@slave1 ~]# java -version
java version "1.8.0_121"
Java(TM) SE Runtime Environment (build 1.8.0_121-b13)
Java HotSpot(TM) 64-Bit Server VM (build 25.121-b13, mixed mode)

# 默认大小通常太小，尽量授予尽可能多的内存，增加CPU的时候，内存也应该增加
java -Xmx1024m  -jar JVMAnalyze-0.0.1.jar
Attaching to process ID 24815, please wait...
Debugger attached successfully.
Server compiler detected.
JVM version is 25.121-b13

using thread-local object allocation.
Parallel GC with 4 thread(s)

Heap Configuration:
   MinHeapFreeRatio         = 0
   MaxHeapFreeRatio         = 100
   MaxHeapSize              = 1073741824 (1024.0MB)
   NewSize                  = 130547712 (124.5MB)
   MaxNewSize               = 357564416 (341.0MB)
   OldSize                  = 261619712 (249.5MB)
   NewRatio                 = 2
   SurvivorRatio            = 8
   MetaspaceSize            = 21807104 (20.796875MB)
   CompressedClassSpaceSize = 1073741824 (1024.0MB)
   MaxMetaspaceSize         = 17592186044415 MB
   G1HeapRegionSize         = 0 (0.0MB)

Heap Usage:
PS Young Generation
Eden Space:
   capacity = 341311488 (325.5MB)
   used     = 253746376 (241.99140167236328MB)
   free     = 87565112 (83.50859832763672MB)
   74.34451664281514% used
From Space:
   capacity = 7864320 (7.5MB)
   used     = 6357184 (6.06268310546875MB)
   free     = 1507136 (1.43731689453125MB)
   80.83577473958333% used
To Space:
   capacity = 7864320 (7.5MB)
   used     = 0 (0.0MB)
   free     = 7864320 (7.5MB)
   0.0% used
PS Old Generation
   capacity = 285736960 (272.5MB)
   used     = 124892064 (119.10635375976562MB)
   free     = 160844896 (153.39364624023438MB)
   43.708753673308486% used

15676 interned Strings occupying 2086936 bytes.


代码
@SpringBootApplication
public class JVMAnalyzeDemo {

    public static void main(String[] args) {
        SpringApplication.run(JVMAnalyzeDemo.class, args);
        Executors.newScheduledThreadPool(1).scheduleAtFixedRate(() -> {
            new Thread(() -> {
                for (int i = 0; i < 1000; i++) {
                    try {
                        //  不干活，专门512kb的小对象
                        byte[] temp = new byte[1024 * 512];
                        Thread.sleep(new Random().nextInt(100)); // 随机睡眠100毫秒秒以内
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                }
            }).start();
        }, 100, 100, TimeUnit.MILLISECONDS);
    }
}

// 打包 mvn clean package
// 服务器上运行 JVMAnalyze-0.0.1.jar
[root@slave1 ~]# jcmd
26395 JVMAnalyze-0.0.1.jar
26699 sun.tools.jcmd.JCmd

GC分析：
[root@slave1 ~]# jcmd | grep "JVMAnalyze-0.0.1.jar"
26395 JVMAnalyze-0.0.1.jar
[root@slave1 ~]# jcmd | grep "JVMAnalyze-0.0.1.jar" | awk '{print $1}'
26395
[root@slave1 ~]# jstat -gc -h10 $(jcmd | grep "JVMAnalyze-0.0.1.jar" | awk '{print $1}') 1000
 S0C    S1C    S0U    S1U      EC       EU        OC         OU       MC     MU    CCSC   CCSU   YGC     YGCT    FGC    FGCT     GCT
512.0  512.0   32.0   0.0   348160.0 64077.1   304128.0   262079.1  35376.0 33719.7 4656.0 4336.7  10098   56.864  20      1.334   58.198
512.0  512.0   0.0    64.0  348160.0 27374.4   304128.0   264791.1  35376.0 33719.7 4656.0 4336.7  10113   56.948  20      1.334   58.282
512.0  512.0   64.0   0.0   348160.0  4725.6   304128.0   267007.2  35376.0 33719.7 4656.0 4336.7  10128   57.045  20      1.334   58.379
512.0  512.0   0.0    96.0  348160.0   0.0     304128.0   270751.3  35376.0 33719.7 4656.0 4336.7  10143   57.146  20      1.334   58.480
512.0  512.0   32.0   0.0   348160.0 54121.6   304128.0   272943.4  35376.0 33719.7 4656.0 4336.7  10158   57.240  20      1.334   58.574
512.0  512.0   0.0    64.0  348160.0   0.0     304128.0   273079.4  35376.0 33719.7 4656.0 4336.7  10173   57.327  20      1.334   58.661
512.0  512.0   64.0   0.0   348160.0 45188.0   304128.0   275295.4  35376.0 33719.7 4656.0 4336.7  10188   57.397  20      1.334   58.731
512.0  512.0   0.0    64.0  348160.0   0.0     304128.0   277999.5  35376.0 33719.7 4656.0 4336.7  10203   57.493  20      1.334   58.827
512.0  512.0   0.0    32.0  348160.0 332614.4  304128.0   279655.6  35376.0 33719.7 4656.0 4336.7  10218   57.581  20      1.334   58.915
512.0  512.0   64.0   0.0   348160.0 281968.4  304128.0   282887.6  35376.0 33719.7 4656.0 4336.7  10232   57.677  20      1.334   59.012

10s YGC 135左右
YGCT 0.1s左右

[root@slave1 ~]# jinfo -flags 26395
Attaching to process ID 26395, please wait...
Debugger attached successfully.
Server compiler detected.
JVM version is 25.121-b13
Non-default VM flags: -XX:CICompilerCount=3 -XX:InitialHeapSize=392167424 -XX:MaxHeapSize=1073741824 -XX:MaxNewSize=357564416 -XX:MinHeapDeltaBytes=524288 -XX:NewSize=130547712 -XX:OldSize=261619712 -XX:+UseCompressedClassPointers -XX:+UseCompressedOops -XX:+UseFastUnorderedTimeStamps -XX:+UseParallelGC
Command line:  -Xmx1024m

通过SOU和S1U可判断出是复制算法，因为两个当中有一个是空的
从OC老年带容量可以看出，一直比较平稳
