Netty是一个高性能、高可扩展性的异步事件驱动的网络应用程序框架，它极大简化了TCP和UDP客户端和服务器开发等网络编程。
Netty重要的四个内容：
1）Reactor线程模型：一种高性能的多线程程序设计思路
2）Netty中自己定义的Channel概念：增强版的Channel通道
3）ChannelPipeline职责链设计模式：事件处理机制
4）内存管理：增强的ByteBuf缓冲区

Netty整体结构图：
1.支持Socket等多种传输协议
2.提供多种协议的编解码实现
3.核心设计包含事件处理模型、API的使用、ByteBuffer的增强

官网：https://netty.io

Netty线程模型
为了让NIO处理更好的利用多线程特性，Netty实现了Reactor线程模型
Reactor模型中有四个核心概念：
1）Resources资源（请求/任务）
2）Synchronous Event Demultiplexer同步事件复用器
3）Dispatcher分配器
4）Request Handler请求处理器

EventLoopGroup初始化过程（Netty启动时会构建多个Reactor线程也就是EventLoop）
构造函数 -》
确定线程数量：默认cpus*2 -》
new Executor：构建线程执行器 -》
for->newChild():构建EventLoop -》
new EventExecutorChooser

Main EventLoopGroup
Sub Group
两组EventLoopGroup（Main&Sub）处理不同通道不同事件

EventLoop的启动
EventLoop自身实现了Executor接口，当调用executor方法提交任务时，
则判断是否启动，为启动则调用内置的executor创建新线程来触发run方法执行
1.executor：请求执行任务   SingleThreadEventExecutor 772行
2.addTask：增加到任务队列   SingleThreadEventExecutor 778行
3.判断是否是EventLoop自身调用    SingleThreadEventExecutor 779行
4.startThread->doStartThread    SingleThreadExecutor 883行
5.使用executor创建新线程执行run  SingleThreadExecutor 898,909行

Bind绑定端口过程
1.bind（端口）AbstractBootStrap
2.创建和初始化Channel
3.注册到EventLoop中的Selector上
4.doBind()->channel.bind
5.pipelin.bind
6.HeadContext.bind
7.AbstractUnsafe.bind
8.NioServerSocketChannel.doBind


Channel概念
netty中的Channel是一个抽象的概念，可以理解为对JDK NIO Channel的增强和扩展
增加了很多属性和方法，完整信息可以看代码注释

服务端要应对海量连接，难度大，而客户端仅仅是一个连接
Reactor多线程模式的设计，是Netty高性能很重要的一个原因



