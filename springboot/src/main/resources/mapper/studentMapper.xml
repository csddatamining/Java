<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.study.springboot.dao.StudentMapper">
    <resultMap id="BaseResultMap" type="com.study.springboot.entity.Student" >
        <!--主键设置id，其他用result，column就是数据库的字段名，property就是实体类的属性名
        jdbcType就是该类型的字段名-->
        <id column="id" property="id" jdbcType="INTEGER" />
        <result column="name" property="name" jdbcType="VARCHAR" />
        <result column="sex" property="sex" jdbcType="VARCHAR" />
    </resultMap>
<!--根据id来查找对象-->
    <select id="findStudentById" resultType="com.study.springboot.entity.Student">
    SELECT id,name,sex from student where id=#{id}
    </select>
<!--根据用户名来模糊查找对象-->
    <select id="findStudentsByName" parameterType="String" resultType="com.study.springboot.entity.Student">
    SELECT id,name,sex from student where name like '%${value}%';
    </select>
<!--查找所有，这里的返回值使用resultType，放泛型里面的类型-->
    <select id="findAll" resultType="com.study.springboot.entity.Student">
        SELECT id,name,sex from student;
    </select>
<!--查找所有，这里的返回值用自定义的resultMap对象-->
    <select id="selectAll" resultMap="BaseResultMap">
        SELECT id,name,sex from student;
    </select>
<!--添加一个用户-->
    <insert id="insertStudent" parameterType="com.study.springboot.entity.Student">
    insert into student(name,sex) VALUES(#{name},'${sex}')
    </insert>
<!--修改一个用户-->
    <update id="updateStudent" parameterType="com.study.springboot.entity.Student">
    update student set name=#{name},sex=#{sex} where id=#{id}
    </update>
<!--删除一个用户-->
    <delete id="deleteStudent" parameterType="int">
    delete from student where id=#{id}
    </delete>
</mapper>